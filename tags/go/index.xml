<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Hao&#39;s Blog</title>
    <link>https://rainjoe.github.io/tags/go/</link>
    <description>Recent content in Go on Hao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 05 Apr 2022 16:24:35 +0800</lastBuildDate><atom:link href="https://rainjoe.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浅析 gopher Lua</title>
      <link>https://rainjoe.github.io/post/%E6%B5%85%E6%9E%90gopher-lua/</link>
      <pubDate>Tue, 05 Apr 2022 16:24:35 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/%E6%B5%85%E6%9E%90gopher-lua/</guid>
      <description>最近在使用 gopher-lua 来处理 Go 框架内的一些复杂逻辑，就想整理一下这部分的知识。Lua 是一门非常简单，小巧的语言，也正是得益于这个特性，使得它可以和高性</description>
    </item>
    
    <item>
      <title>了解 Go 内存分配</title>
      <link>https://rainjoe.github.io/post/%E4%BA%86%E8%A7%A3go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Tue, 08 Sep 2020 21:23:30 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/%E4%BA%86%E8%A7%A3go%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>在工作中遇到线上服务内存问题时，通过pprof火焰图经常能看到一些运行时的函数，了解运行时的东西对分析线上服务出现的问题很有帮助。这篇文章主</description>
    </item>
    
    <item>
      <title>了解 Go 调度器</title>
      <link>https://rainjoe.github.io/post/%E4%BA%86%E8%A7%A3go%E8%B0%83%E5%BA%A6%E5%99%A8/</link>
      <pubDate>Sun, 30 Aug 2020 15:47:37 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/%E4%BA%86%E8%A7%A3go%E8%B0%83%E5%BA%A6%E5%99%A8/</guid>
      <description>无意中看到GopherCon上的一个演讲，The Scheduler Saga。觉得讲的很好，这篇文章作为笔记记录下来了。 Go 调度器初探 什么是 Go 调度器？ Go调度器</description>
    </item>
    
    <item>
      <title>6.824 lab4 Sharded Key/Value Service</title>
      <link>https://rainjoe.github.io/post/6.824-lab4-sharded-key-value-service/</link>
      <pubDate>Sun, 21 Apr 2019 23:09:34 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/6.824-lab4-sharded-key-value-service/</guid>
      <description>这个 lab 是要在 lab2 的基础上实现一个容错的 kv 存储 (kvserver)，实现 Put、Append、Get 操作。 3A 首先 client 端发起的 Put、Append、</description>
    </item>
    
    <item>
      <title>6.824 lab3 Fault-tolerant Key/Value Service</title>
      <link>https://rainjoe.github.io/post/6.824-lab3-fault-toleran-key-value-service/</link>
      <pubDate>Sun, 13 Jan 2019 23:06:36 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/6.824-lab3-fault-toleran-key-value-service/</guid>
      <description>这个 lab 是要在 lab2 的基础上实现一个容错的 kv 存储 (kvserver)，实现 Put、Append、Get 操作。 3A 首先 client 端发起的 Put、Append、</description>
    </item>
    
    <item>
      <title>6.824 lab2 raft</title>
      <link>https://rainjoe.github.io/post/6.824-lab2-raft/</link>
      <pubDate>Wed, 28 Nov 2018 22:49:54 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/6.824-lab2-raft/</guid>
      <description>在 lab2 实在是拖的太久了，今天终于通过了所有测试用例，先附上一张测试全部通过的截图。 说实话，做这个lab还是蛮吃力的，之前对并发编程接触的不多，</description>
    </item>
    
    <item>
      <title>6.824 lab1 mapreduce</title>
      <link>https://rainjoe.github.io/post/6.824-lab1-mapreduce/</link>
      <pubDate>Thu, 11 Oct 2018 22:49:54 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/6.824-lab1-mapreduce/</guid>
      <description>这个 lab 很早之前就已经做过了，最近在填raft的坑，就干脆把这个也重新做了一下。总的来说这个lab还算是简单的，当然还是有些实现细节要注意。 Part</description>
    </item>
    
  </channel>
</rss>
