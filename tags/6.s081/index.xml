<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>6.s081 on Hao&#39;s Blog</title>
    <link>https://rainjoe.github.io/tags/6.s081/</link>
    <description>Recent content in 6.s081 on Hao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Feb 2022 15:11:20 +0800</lastBuildDate><atom:link href="https://rainjoe.github.io/tags/6.s081/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Locks</title>
      <link>https://rainjoe.github.io/post/lock/</link>
      <pubDate>Thu, 03 Feb 2022 15:11:20 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/lock/</guid>
      <description>在这个实验中将获得重新设计代码以提高并行性的经验。多核机器上并行度低的普遍因素是锁争用，提高并行度经常涉及到同时修改数据结构和加锁策略以减少</description>
    </item>
    
    <item>
      <title>Multithreading</title>
      <link>https://rainjoe.github.io/post/multithread/</link>
      <pubDate>Thu, 03 Feb 2022 11:27:59 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/multithread/</guid>
      <description>这个实验是用来帮助熟悉多线程的，要我们实现一个用户态线程。并使用多线程加速程序运行，实现同步屏障。 Uthread: switching between threads 实验要求设计用户态线程的上下文切换</description>
    </item>
    
    <item>
      <title>Copy-on-Write Fork</title>
      <link>https://rainjoe.github.io/post/cow/</link>
      <pubDate>Sun, 19 Dec 2021 20:18:21 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/cow/</guid>
      <description>虚拟内存在物理内存的基础上提供了一层抽象，因此内核可以通过 PTE 的标志位引发缺页中断的方式来控制内存的访问。计算机科学领域的任何问题都可以通过增</description>
    </item>
    
    <item>
      <title>xv6 lazy page allocation</title>
      <link>https://rainjoe.github.io/post/lazy/</link>
      <pubDate>Sun, 31 Oct 2021 15:12:31 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/lazy/</guid>
      <description>这个 lab 要实现页的按需分配。主要考虑的场景是应用程序通过 sbrk 系统调用向操作系统申请大量的堆内存，此时内核需要花费大量的时间来分配物理内存，将物理</description>
    </item>
    
    <item>
      <title>Traps</title>
      <link>https://rainjoe.github.io/post/traps/</link>
      <pubDate>Thu, 07 Oct 2021 09:49:14 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/traps/</guid>
      <description>Traps 概述 Traps （中断）使得 CPU 放弃当前执行的指令转而执行特定的程序，有三种发生中断的情形： 通过 ecall 指令执行系统调用。 产生异常，如除零错误，虚拟地址转换</description>
    </item>
    
    <item>
      <title>page tables</title>
      <link>https://rainjoe.github.io/post/pgtbl/</link>
      <pubDate>Tue, 05 Oct 2021 15:40:54 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/pgtbl/</guid>
      <description>这个实验是有关页表的，主要了解页表的构成，并完成将用户空间的数据拷贝到内核空间的功能。 页表 操作系统通过页表这种机制为每个进程提供独立的地址空</description>
    </item>
    
    <item>
      <title>System calls</title>
      <link>https://rainjoe.github.io/post/system_calls/</link>
      <pubDate>Sat, 11 Sep 2021 16:18:43 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/system_calls/</guid>
      <description>这是 6.s081 的第二个实验，使用系统调用来写一些工具，从而帮助你更好的了解系统调用是如何工作的。 RISC-V 调用规约 （calling convention) 为了更好的理解系统调用的</description>
    </item>
    
    <item>
      <title>Xv6 and Unix utilities</title>
      <link>https://rainjoe.github.io/post/xv6_and_unix_utilities/</link>
      <pubDate>Sun, 04 Jul 2021 14:48:39 +0800</pubDate>
      
      <guid>https://rainjoe.github.io/post/xv6_and_unix_utilities/</guid>
      <description>新开坑 6.s081 系列，这个系列的 lab 其实已经做了一些了，但是没有整理出来，现在陆续整理出来，整理的过程也能加深对知识点的理解。这个 lab 的内容主要是熟悉 xv6</description>
    </item>
    
  </channel>
</rss>
